package net.lax1dude.eaglercraft;

import net.minecraft.src.GLAllocation;

import java.nio.IntBuffer;

import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2.*;

public class EarlyLoadScreen {

    public static final String loadScreen = "";

    private static BufferGL vbo = null;
    private static ProgramGL program = null;

    public static void paintScreen() {

        TextureGL tex = _wglGenTextures();
        _wglActiveTexture(_wGL_TEXTURE0);
        _wglBindTexture(_wGL_TEXTURE_2D, tex);
        _wglTexParameteri(_wGL_TEXTURE_2D, _wGL_TEXTURE_MAG_FILTER, _wGL_NEAREST);
        _wglTexParameteri(_wGL_TEXTURE_2D, _wGL_TEXTURE_MIN_FILTER, _wGL_NEAREST);
        _wglTexParameteri(_wGL_TEXTURE_2D, _wGL_TEXTURE_WRAP_S, _wGL_CLAMP);
        _wglTexParameteri(_wGL_TEXTURE_2D, _wGL_TEXTURE_WRAP_T, _wGL_CLAMP);
        EaglerImage img = EaglerAdapter.loadPNG(Base64.decodeBase64(loadScreen));
        IntBuffer upload = GLAllocation.createDirectIntBuffer(800 * 800);
        upload.put(img.data);
        upload.flip();
        _wglTexImage2D(_wGL_TEXTURE_2D, 0, _wGL_RGBA, 800, 800, 0, _wGL_RGBA, _wGL_UNSIGNED_BYTE, upload);

        upload.clear();
        upload.put(Float.floatToIntBits(0.0f));
        upload.put(Float.floatToIntBits(0.0f));
        upload.put(Float.floatToIntBits(0.0f));
        upload.put(Float.floatToIntBits(1.0f));
        upload.put(Float.floatToIntBits(1.0f));
        upload.put(Float.floatToIntBits(0.0f));
        upload.put(Float.floatToIntBits(1.0f));
        upload.put(Float.floatToIntBits(0.0f));
        upload.put(Float.floatToIntBits(0.0f));
        upload.put(Float.floatToIntBits(1.0f));
        upload.put(Float.floatToIntBits(1.0f));
        upload.put(Float.floatToIntBits(1.0f));
        upload.flip();

        vbo = _wglCreateBuffer();
        _wglBindBuffer(_wGL_ARRAY_BUFFER, vbo);
        _wglBufferData0(_wGL_ARRAY_BUFFER, upload, _wGL_STATIC_DRAW);

        ShaderGL vert = _wglCreateShader(_wGL_VERTEX_SHADER);
        _wglShaderSource(vert, _wgetShaderHeader() + "\nprecision lowp float; in vec2 a_pos; out vec2 v_pos; void main() { gl_Position = vec4(((v_pos = a_pos) - 0.5) * vec2(2.0, -2.0), 0.0, 1.0); }");
        _wglCompileShader(vert);

        ShaderGL frag = _wglCreateShader(_wGL_FRAGMENT_SHADER);
        _wglShaderSource(frag, _wgetShaderHeader() + "\nprecision lowp float; in vec2 v_pos; out vec4 fragColor; uniform sampler2D tex; uniform vec2 aspect; void main() { fragColor = vec4(texture(tex, clamp(v_pos * aspect - ((aspect - 1.0) * 0.5), 0.02, 0.98)).rgb, 1.0); }");
        _wglCompileShader(frag);

        program = _wglCreateProgram();

        _wglAttachShader(program, vert);
        _wglAttachShader(program, frag);
        _wglBindAttributeLocation(program, 0, "a_pos");
        _wglLinkProgram(program);
        _wglDetachShader(program, vert);
        _wglDetachShader(program, frag);
        _wglDeleteShader(vert);
        _wglDeleteShader(frag);

        try {
            Thread.sleep(50L);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        _wglUseProgram(program);
        _wglUniform1i(_wglGetUniformLocation(program, "tex"), 0);

        int width = getCanvasWidth();
        int height = getCanvasHeight();
        float x, y;
        if (width > height) {
            x = (float) width / (float) height;
            y = 1.0f;
        } else {
            x = 1.0f;
            y = (float) height / (float) width;
        }

        _wglActiveTexture(_wGL_TEXTURE0);
        _wglBindTexture(_wGL_TEXTURE_2D, tex);

        _wglViewport(0, 0, width, height);
        _wglClearColor(1.0f, 1.0f, 1.0f, 1.0f);
        _wglClear(_wGL_COLOR_BUFFER_BIT | _wGL_DEPTH_BUFFER_BIT);

        _wglUniform2f(_wglGetUniformLocation(program, "aspect"), x, y);

        BufferArrayGL vao = _wglCreateVertexArray();
        _wglBindVertexArray(vao);
        _wglEnableVertexAttribArray(0);
        _wglVertexAttribPointer(0, 2, _wGL_FLOAT, false, 8, 0);
        _wglDrawArrays(_wGL_TRIANGLES, 0, 6);
        _wglDisableVertexAttribArray(0);
        _wglFlush();
        updateDisplay();

        _wglUseProgram(null);
        _wglBindBuffer(_wGL_ARRAY_BUFFER, null);
        _wglBindTexture(_wGL_TEXTURE_2D, null);
        _wglDeleteTextures(tex);
        _wglDeleteVertexArray(vao);
    }

}
